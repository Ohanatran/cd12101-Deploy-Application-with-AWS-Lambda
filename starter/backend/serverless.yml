app: serverless-todo-app-oanhtp
service: serverless-todo-app-oanhtp
frameworkVersion: '3.38.0'

plugins:
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-reqvalidator-plugin
  - serverless-offline

provider:
  name: aws
  runtime: nodejs16.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  profile: default
  tracing:
    lambda: true
    apiGateway: true
  logs:
    restApi: true
  environment:
    TODOS_TABLE: Serverless-project4-todo-app-oanhtp-${self:provider.stage}
    TODOS_CREATED_AT_INDEX: CreatedAtIndex
    IMAGE_S3_BUCKET: serverless-project4-todo-app-oanhtp-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    PROJECT_NAME: serverless-todo-app-oanhtp
    INDEX_NAME: ${self:provider.environment.TODOS_CREATED_AT_INDEX}

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Serverless Application Todo API
        description: Serverless application for todos
    models:
      - name: CreateTodoRequest
        contentType: application/json
        schema: ${file(models/create-todo-model.json)}
      - name: UpdateTodoRequest
        contentType: application/json
        schema: ${file(models/update-todo-model.json)}

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    tracing: true
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    # iam roles
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:Query
        Resource: !GetAtt TodosDynamoDBTable.Arn
      - Effect: 'Allow'
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:407041924449:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.TODOS_CREATED_AT_INDEX}
  # TODO: Configure this function
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new todo job
            description: Allow user create a new todo job
            requestModels:
              'application/json': CreateTodoRequest
    # iam role
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt TodosDynamoDBTable.Arn

  # TODO: Configure this function
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a todo job
            description: Allow user update a todo job
            requestModels:
              'application/json': UpdateTodoRequest
    # iam roles
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt TodosDynamoDBTable.Arn

  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    # iam roles
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:DeleteItem
        Resource: !GetAtt TodosDynamoDBTable.Arn

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    tracing: true
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGE_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt TodosDynamoDBTable.Arn

resources:
  Resources:
    # TODO: Add any necessary AWS resources
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT,DELETE,PATCH'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    GatewayResponseDefault5XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT,DELETE,PATCH'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: ApiGatewayRestApi

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    TodosDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODOS_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    ImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGE_S3_BUCKET}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
      # Bucket policy
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGE_S3_BUCKET}/*'
        Bucket: !Ref ImagesBucket
